name: Publication Docker image
on:
  push:
    branches: [master]
jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
      - name: Cache Docker Image Layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: ./
          file: ./Dockerfile  # Sp√©cifiez le chemin vers votre Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64, linux/arm64, linux/aarch64
          tags: ${{ secrets.DOCKER_USERNAME }}/ffsend:latest
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache 
      # Extraction de la version √† partir du fichier Cargo.toml
      - name: Extract version from Cargo.toml
        id: extract_version
        run: |
          version=$(grep ^version Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$version" >> $GITHUB_ENV
          echo "Extracted version: $version"
      # Cr√©ation d'un tag bas√© sur la version extraite
      - name: Create Tag from Version
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Action"
          git tag v${{ env.version }}
          git push origin v${{ env.version }}
      # √âtape pour g√©n√©rer les fichiers de sortie √† l‚Äôaide de Docker
      - name: Run Docker Container to Generate Output
        run: |
          mkdir -p output
          for platform in linux/amd64 linux/arm64 linux/aarch64
          do
            docker run --rm --platform $platform -v ${{ github.workspace }}/output:/output ${{ secrets.DOCKER_USERNAME }}/ffsend:latest
            mv output/ffsend output/ffsend-$(echo $platform | sed 's/\//-/g')-v${{ env.version }}
          done
      # V√©rification de l‚Äôexistence des fichiers g√©n√©r√©s
      - name: List Output Directory
        run: ls -l output/
      # Cr√©ation de la release GitHub en utilisant le tag g√©n√©r√©
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GH_OWNER_TOKEN }}
          tag_name: v${{ env.version }}  # Utilise le tag bas√© sur la version de Cargo.toml
          prerelease: false
          draft: false
          files: output/*
          generate_release_notes: true
          name: "Release v${{ env.version }}"
          body: |
            <details>
              <summary>ü§ñ Autogenerated release</summary>
            </details>
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Utilis√© pour cr√©er la release